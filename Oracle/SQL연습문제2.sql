/*
DATE 2025.07.21
NAME MINSU CHOI
ACTION SQL PRACTICE 2
*/

-- ■■■실습 2-2 ■■■
CREATE TABLE Student (
stdNo   char(8) primary key, 
Name    VARCHAR2(20) not null, 
Birth   date    not null, 
Major   VARCHAR2(20), 
ENR_DATE    date    not null
);

CREATE TABLE Course (
CS_ID   NUMBER(4) primary key, 
CS_NAME    VARCHAR2(20) not null, 
CS_Credit   NUMBER(1)    not null, 
CD_DEPT   VARCHAR2(20)  not null
);

CREATE TABLE Enrollment (
ENR_NO          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
ENR_STDNO       VARCHAR2(8) not null, 
ENR_CSID        NUMBER(4)    not null, 
MID_SCORE       NUMBER, 
FINAL_SCORE    NUMBER,
TOTAL_SCORE     NUMBER,
GRADE           CHAR(1)
);



-- ■■■실습 2-3 ■■■
-- 학생 테이블 (STUDENT) 데이터 삽입
INSERT INTO STUDENT VALUES ('20121016', '김유신', '1991-01-13', '국문학과', '2012-02-01');
INSERT INTO STUDENT VALUES ('20111126', '김춘추', '1992-04-11', '경제학과', '2011-02-01');
INSERT INTO STUDENT VALUES ('20100216', '장보고', '1991-05-23', '컴퓨터학과', '2010-02-01');
INSERT INTO STUDENT VALUES ('20120326', '강감찬', '1991-02-09', '영문학과', '2012-02-01');
INSERT INTO STUDENT VALUES ('20130416', '이순신', '1992-11-30', '영문학과', '2012-02-01');
INSERT INTO STUDENT VALUES ('20110521', '송상현', '1992-07-17', '컴퓨터학과', '2011-02-01');

-- 강좌 테이블
INSERT INTO COURSE VALUES ('1059', '고전문학', 3, '국문학과');
INSERT INTO COURSE VALUES ('2312', '데이터베이스', 3, '컴퓨터학과');
INSERT INTO COURSE VALUES ('1203', 'Easy Writing', 3, '영문학과');
INSERT INTO COURSE VALUES ('2039', '글로벌경제학', 3, '경제학과');
INSERT INTO COURSE VALUES ('2301', '프로그래밍언어', 3, '컴퓨터학과');
INSERT INTO COURSE VALUES ('2303', '컴퓨터과학 개론', 2, '컴퓨터학과');
INSERT INTO COURSE VALUES ('3012', '마케팅 전략', 2, '경영학과');

-- 수강 테이블 
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20111126', '1203');
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20121016', '2301');
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20121016', '2303');
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20111126', '2039');
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20100216', '3012');
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20120326', '3012');
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20121016', '2312');
INSERT INTO ENROLLMENT (ENR_STDNO, ENR_CSID) VALUES ('20130416', '3012');

-- ■■■실습 4- ■■■
SELECT * FROM STUDENT WHERE MAJOR LIKE '컴퓨터학과';

-- ■■■실습 5- ■■■
SELECT * FROM COURSE WHERE cd_dept LIKE '컴%';

-- ■■■실습 -6 ■■■
SELECT * FROM ENROLLMENT WHERE enr_stdno = '20121016';

-- ■■■실습 -7 ■■■
SELECT NAME, MAJOR, ENR_DATE FROM STUDENT WHERE MAJOR LIKE '국%';

-- ■■■실습 -8 ■■■
SELECT * FROM COURSE WHERE CS_CREDIT = 2;

-- ■■■실습 - 9■■■
SELECT STDNO, NAME, BIRTH FROM STUDENT WHERE BIRTH >= TO_DATE('1992-01-01', 'YYYY-MM-DD');
-- ■■■실습 - 10■■■
UPDATE enrollment SET MID_SCORE = 36, FINAL_SCORE= 42
                    WHERE ENR_STDNO='20111126' AND ENR_CSID=1203;
                    
UPDATE enrollment SET MID_SCORE = 24, FINAL_SCORE= 62

WHERE ENR_STDNO='20121016' AND ENR_CSID=2301;

UPDATE enrollment SET MID_SCORE = 28, FINAL_SCORE= 40

WHERE ENR_STDNO='20121016' AND ENR_CSID=2303;

UPDATE enrollment SET MID_SCORE = 37, FINAL_SCORE= 57

WHERE ENR_STDNO='20111126' AND ENR_CSID=2039;

UPDATE enrollment SET MID_SCORE = 28, FINAL_SCORE= 68

WHERE ENR_STDNO='20100216' AND ENR_CSID=3012;

UPDATE enrollment SET MID_SCORE = 16, FINAL_SCORE= 65

WHERE ENR_STDNO='20120326' AND ENR_CSID=3012;

UPDATE enrollment SET MID_SCORE = 18, FINAL_SCORE= 38

WHERE ENR_STDNO='20121016' AND ENR_CSID=2312;

UPDATE enrollment SET MID_SCORE = 25, FINAL_SCORE= 58

WHERE ENR_STDNO='20130416' AND ENR_CSID=3012;
                    
-- ■■■실습 -11 ■■■
UPDATE enrollment SET
            TOTAL_SCORE = MID_SCORE + FINAL_SCORE,
            GRADE = CASE
                        WHEN (MID_SCORE + FINAL_SCORE) >= 90 THEN 'A'
                        WHEN (MID_SCORE + FINAL_SCORE) >= 80 THEN 'B'
                        WHEN (MID_SCORE + FINAL_SCORE) >= 70 THEN 'C'
                        WHEN (MID_SCORE + FINAL_SCORE) >= 60 THEN 'D'
                        ELSE 'F'
                    END;

-- ■■■실습 - 12■■■
SELECT * FROM ENROLLMENT ORDER BY total_score DESC;

-- ■■■실습 - 13■■■
SELECT * FROM ENROLLMENT WHERE ENR_CSID = 3012 ORDER BY total_score DESC;
-- ■■■실습 - 14■■■
SELECT CS_ID, CS_NAME FROM course WHERE CS_NAME = '데이터베이스' OR CS_NAME = '프로그래밍언어';
-- ■■■실습 - 15■■■
SELECT CS_NAME, CD_DEPT FROM COURSE;
-- ■■■실습 - 16■■■
SELECT STDNO, NAME FROM STUDENT ORDER BY NAME;

-- ■■■실습 - 17■■■
SELECT DISTINCT ENR_STDNO FROM ENROLLMENT;

-- ■■■실습 - 18■■■
SELECT MAX(TOTAL_SCORE) 가장_큰_총점 FROM ENROLLMENT;

-- ■■■실습 - 19■■■
SELECT MAJOR, COUNT(*) 학생수 FROM STUDENT GROUP BY MAJOR;
-- ■■■실습 - 20■■■
SELECT ENR_CSID, COUNT(*) 수강학생수 FROM ENROLLMENT GROUP BY ENR_CSID HAVING COUNT(*) >= 2;
-- ■■■실습 - 21■■■
SELECT STDNO, NAME, MAJOR, ENR_CSID, MID_SCORE,FINAL_SCORE,TOTAL_SCORE,GRADE
    FROM STUDENT S
    JOIN ENROLLMENT E ON S.STDNO = e.enr_stdno;
-- ■■■실습 - 22■■■
SELECT NAME, STDNO, ENR_CSID FROM STUDENT S JOIN ENROLLMENT E
    ON S.STDNO = e.enr_stdno WHERE ENR_CSID = '3012';
-- ■■■실습 - 23■■■
SELECT STDNO, NAME, COUNT(STDNO) 수강신청건수, SUM(Total_Score) 종합점수, 
        SUM(Total_Score)/COUNT(STDNO) 평균 
        FROM STUDENT S JOIN ENROLLMENT E
        ON S.STDNO = e.enr_stdno
        group BY s.name, s.stdno
        order by stdno;
-- ■■■실습 - 24■■■
select enr_no, enr_stdno, cs_id, cs_name, cs_credit from enrollment e
    join course c on c.cs_id = e.enr_csid;
-- ■■■실습 - 25■■■
SELECT COUNT(*) AS 마케팅_전략_수강_신청건수, 
    AVG(TOTAL_SCORE) AS 마케팅_전략_평균
    FROM Enrollment E
    join student s on E.enr_stdno = s.stdno
    where enr_csid = '3012';
-- ■■■실습 - 26■■■
select enr_stdno, cs_name
FROM enrollment e
join course c on e.enr_csid = c.cs_id
where e.grade = 'A';
-- ■■■실습 - 27■■■
select stdno, NAME, MAJOR, ENR_CSID, CS_NAME, CS_CREDIT, TOTAL_SCORE, GRADE
    FROM STUDENT S
    JOIN ENROLLMENT E ON s.stdno = e.enr_STDNO
    JOIN COURSE C ON e.enr_csid = c.cs_id;
    
    

-- ■■■실습 - 28■■■
SELECT STDNO, NAME, CS_NAME, TOTAL_SCORE, GRADE
    FROM STUDENT S
    JOIN ENROLLMENT E  ON s.stdno = e.enr_stdno
    JOIN COURSE C ON e.enr_csid = c.cs_id
    WHERE GRADE = 'F';

-- ■■■실습 - 29■■■
SELECT STDNO, NAME, SUM(CS_CREDIT) 이수학점
    FROM STUDENT S
    JOIN ENROLLMENT E  ON s.stdno = e.enr_stdno
    JOIN COURSE C ON e.enr_csid = c.cs_id
    WHERE GRADE != 'F'
    GROUP BY S.NAME, STDNO;

-- ■■■실습 - 30■■■
SELECT S.STDNO, S.NAME, S.MAJOR
    FROM STUDENT S
    WHERE S.STDNO NOT IN(
    SELECT ENR_STDNO FROM ENROLLMENT
    );



-- ■■■실습 - ■■■


-- ■■■실습 - ■■■

-- ■■■실습 - ■■■

-- ■■■실습 - ■■■


